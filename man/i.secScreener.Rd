% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/callWrappers.R
\name{i.secScreener}
\alias{i.secScreener}
\title{Securities Search/Screener}
\usage{
i.secScreener(..., literal = NULL)
}
\arguments{
\item{...}{Any number of unquoted conditions.
Each condition should contain a \href{http://docs.intrinio.com/tags/intrinio-public#data-point}{data point tag} a data tag
on its left-hand side, a value or expression on a right-hand side and allowed operator in-between.}

\item{literal}{A string with intrinio-formatted conditions.
If not NULL, will ignore parameters and  pass literal instead.
Recommended when \code{i.secScreener} is used in scripts.}
}
\value{
Data in specified format. See \code{\link{intrOptions}} for details
}
\description{
Returns information on securities that matches passed conditions
}
\details{
Currenly the following operators are available:
\describe{
  \item{\code{==}}{Equal}
  \item{\code{>=}}{Greater or equal}
  \item{\code{<=}}{Less or equal}
  \item{\code{>}}{Greater}
  \item{\code{<}}{Less}
  \item{\code{ \%contains\% }}{Contains text}
}\cr
Right-hand side of condition should be either a value, a function call or an expression.
Data tags on the right-hand side are not supported by API.\cr
Parser will attempt to evaluate the right-hand side and in case of a failure will consider it a string literal.\cr
Left-hand side is not evaluated.
}
\examples{
#' \dontrun{
i.secScreener(open_price >= 10.50, pricetoearnings > 10)
i.secScreener(literal = 'open_price~gte~10.50,pricetoearnings~gt~10') #Same

#Same results with executable code on right-hand side
a <- 10
b <- 0.5
c <- 100
i.secScreener(open_price >= a + b, pricetoearnings > sqrt(c))
}
}

